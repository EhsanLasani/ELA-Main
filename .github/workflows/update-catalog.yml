name: Update Catalog & Notify

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: read

jobs:
  update-catalog:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR files
        id: prfiles
        uses: actions/github-script@v7
        with:
          script: |
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              per_page: 300
            });
            const changed = files.data.map(f => f.filename);
            core.setOutput("changed", JSON.stringify(changed));

      - name: Show changed files (debug)
        run: |
          echo "${{ steps.prfiles.outputs.changed }}"

      - name: Update templates/catalog.csv
        id: updatecsv
        run: |
          set -e
          CATALOG="catalog.csv"
          if [ ! -f "$CATALOG" ]; then
            echo "No catalog.csv found. Skipping."
            # still expose an output so later 'if' works
            echo "UPDATED=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          python - <<'PY'
          import csv, json, os, sys, datetime, re

          CATALOG = "catalog.csv"
          changed = json.loads(os.environ.get("CHANGED", "[]"))
          pr_title = os.environ.get("PR_TITLE","")
          pr_number = os.environ.get("PR_NUMBER","")
          repo = os.environ.get("GITHUB_REPOSITORY","")
          default_branch = "main"

          if not changed:
            # no touched files; mark not-updated and exit
            with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as go:
              go.write("UPDATED=0\n")
            sys.exit(0)

          def normalize(p): return p.strip().strip("/")

          changed_set = set(map(normalize, changed))

          m = re.search(r'\bv(\d+(?:\.\d+)?)\b', pr_title, re.I)
          version_from_title = f"v{m.group(1)}" if m else None

          try:
            with open(CATALOG, newline='', encoding='utf-8') as f:
              rows = list(csv.DictReader(f))
          except FileNotFoundError:
            with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as go:
              go.write("UPDATED=0\n")
            sys.exit(0)

          if not rows:
            with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as go:
              go.write("UPDATED=0\n")
            sys.exit(0)

          today = datetime.datetime.now(datetime.timezone.utc).strftime("%Y-%m-%d")
          updated = False

          def blob_url(path):
            return f"https://github.com/{repo}/blob/{default_branch}/{path}"

          for r in rows:
            fp = (r.get("File_Path") or "").strip()
            if not fp:
              continue
            nfp = normalize(fp)
            if nfp in changed_set or any(ch.startswith(nfp + "/") for ch in changed_set):
              r["Last_Updated"] = today
              r["Linked_PR"] = f"PR#{pr_number}"
              r["GitHub_URL"] = blob_url(nfp)
              if version_from_title:
                r["Version"] = version_from_title
              updated = True

          if updated:
            with open(CATALOG, "w", newline='', encoding='utf-8') as f:
              w = csv.DictWriter(f, fieldnames=rows[0].keys())
              w.writeheader()
              w.writerows(rows)

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as go:
            go.write(f"UPDATED={'1' if updated else '0'}\n")
          PY
        env:
          CHANGED: ${{ steps.prfiles.outputs.changed }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Commit catalog changes (if any)
        if: ${{ steps.updatecsv.outputs.UPDATED == '1' }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add catalog.csv
          git commit -m "chore(catalog): auto-update from ${{ github.event.pull_request.title }}"
          git push

      
      - name: Notify Teams (optional)
        if: ${{ steps.updatecsv.outputs.UPDATED == '1' }}
        run: |
          if [ -n "${{ secrets.TEAMS_WEBHOOK_URL }}" ]; then
            msg=$(jq -nc --arg t "${{ github.event.pull_request.title }}" \
                            --arg n "${{ github.event.pull_request.number }}" \
                            --arg u "${{ github.event.pull_request.html_url }}" \
                            '{text: ("ðŸ“„ Catalog updated: " + $t + " (PR#" + $n + ") " + $u)}')
            curl -sS -H "Content-Type: application/json" -d "$msg" "${{ secrets.TEAMS_WEBHOOK_URL }}"
          fi
