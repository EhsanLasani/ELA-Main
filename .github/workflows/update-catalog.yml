name: Update Catalog & Notify

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: read

jobs:
  update-catalog:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR files
        id: prfiles
        uses: actions/github-script@v7
        with:
          script: |
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              per_page: 300
            });
            const changed = files.data.map(f => f.filename);
            core.setOutput("changed", JSON.stringify(changed));

      - name: Show changed files (debug)
        run: |
          echo "${{ steps.prfiles.outputs.changed }}"

      - name: Update templates/catalog.csv
        id: updatecsv
        run: |
          set -e
          CATALOG="templates/catalog.csv"
          if [ ! -f "$CATALOG" ]; then
            echo "No catalog.csv found. Skipping."
            exit 0
          fi

          python - <<'PY'
          import csv, json, os, sys, datetime, re

          CATALOG = "templates/catalog.csv"
          changed = json.loads(os.environ.get("CHANGED", "[]"))
          pr_title = os.environ.get("PR_TITLE","")
          pr_number = os.environ.get("PR_NUMBER","")
          repo = os.environ.get("GITHUB_REPOSITORY","")
          default_branch = "main"

          if not changed:
            sys.exit(0)

          def normalize(p): return p.strip().strip("/")

          # map of normalized changed paths for quick lookup
          changed_set = set(map(normalize, changed))

          # parse optional version token from PR title (e.g., v1.2)
          m = re.search(r'\bv(\d+(?:\.\d+)?)\b', pr_title, re.I)
          version_from_title = f"v{m.group(1)}" if m else None

          # load catalog
          with open(CATALOG, newline='', encoding='utf-8') as f:
            rows = list(csv.DictReader(f))
          if not rows:
            sys.exit(0)

          today = datetime.datetime.utcnow().strftime("%Y-%m-%d")
          updated = False

          def blob_url(path):
            return f"https://github.com/{repo}/blob/{default_branch}/{path}"

          for r in rows:
            fp = r.get("File_Path","").strip()
            if not fp:
              continue
            nfp = normalize(fp)
            # update row if its File_Path is exactly (or parent dir matches) one of the changed files
            if nfp in changed_set or any(ch.startswith(nfp + "/") for ch in changed_set):
              r["Last_Updated"] = today
              r["Linked_PR"] = f"PR#{pr_number}"
              # refresh GitHub_URL to main (in case file moved)
              r["GitHub_URL"] = blob_url(nfp)
              if version_from_title:
                r["Version"] = version_from_title
              updated = True

          if updated:
            with open(CATALOG, "w", newline='', encoding='utf-8') as f:
              w = csv.DictWriter(f, fieldnames=rows[0].keys())
              w.writeheader()
              w.writerows(rows)

          print("UPDATED=" + ("1" if updated else "0"))
          PY
        env:
          CHANGED: ${{ steps.prfiles.outputs.changed }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Commit catalog changes (if any)
        if: contains(steps.updatecsv.outputs.UPDATED, '1')
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add templates/catalog.csv
          git commit -m "chore(catalog): auto-update from ${{ github.event.pull_request.title }}"
          git push

      - name: Notify Teams (optional)
        if: contains(steps.updatecsv.outputs.UPDATED, '1') && secrets.TEAMS_WEBHOOK_URL != ''
        run: |
          msg=$(jq -nc --arg t "${{ github.event.pull_request.title }}" \
                          --arg n "${{ github.event.pull_request.number }}" \
                          --arg u "${{ github.event.pull_request.html_url }}" \
                          '{text: ("ðŸ“„ Catalog updated: " + $t + " (PR#" + $n + ") " + $u)}')
          curl -sS -H "Content-Type: application/json" -d "$msg" "${{ secrets.TEAMS_WEBHOOK_URL }}"
