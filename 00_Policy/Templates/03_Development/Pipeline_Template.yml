
# PIPELINE TEMPLATE (CI/CD)
#
# ---
# ELA Metadata Block
"""
Artifact_ID: TMP-DEV-PIPELINE-TEM
Artifact_Name: PIPELINE TEMPLATE (CI/CD)
Artifact_Type: TMP
Version: v1.0
Status: Draft
Owner: Enterprise Architecture Office (EAO)
Last_Updated: 2025-10-25
Description: Baseline CI/CD pipeline template for ELA projects (GitHub Actions)
File_Path: 00_Policy/Templates/03_Development/Pipeline_Template.yml
GitHub_URL: https://github.com/EhsanLasani/ELA-Main/blob/main/00_Policy/Templates/03_Development/Pipeline_Template.yml
Phase: Development
Dependencies: None
Process_Group: Development
Process_Step: N/A
Template_Source: ELA-Template
Validation_Status: Pending
Comments: Auto-generated on 2025-10-25
"""
#
# | Field           | Value                                                                |
# |-----------------|---------------------------------------------------------------------|
# | Artifact ID     | TMP-DEV-PIPELINE-TEM                                                |
# | Artifact Name   | PIPELINE TEMPLATE (CI/CD)                                           |
# | Artifact Type   | TMP                                                                 |
# | Version         | v1.0                                                                |
# | Status          | Draft                                                               |
# | Owner           | Enterprise Architecture Office (EAO)                                 |
# | Last Updated    | 2025-10-25                                                          |
# | Description     | Baseline CI/CD pipeline template for ELA projects (GitHub Actions)   |
# | File Path       | 00_Policy/Templates/03_Development/Pipeline_Template.yml             |
# | GitHub URL      | https://github.com/EhsanLasani/ELA-Main/blob/main/00_Policy/Templates/03_Development/Pipeline_Template.yml |
# | Phase           | Development                                                         |
# | Dependencies    | None                                                                |
# | Process Group   | Development                                                         |
# | Process Step    | N/A                                                                 |
# | Template Source | ELA-Template                                                        |
# | Validation Stat | Pending                                                             |
# | Comments        | Auto-generated on 2025-10-25                                        |
# ---
#
# How to Use:
# - Use this as a baseline for all ELA project CI/CD pipelines.
# - Customize the matrix, language-specific steps, and deployment logic per service.
# - Reference this template in project documentation and link to filled instances.





name: ci-cd

        uses: actions/cache@v4
  push:
    branches: [ main, release/*, hotfix/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

        with:
  ORG_NAME: your-org
  APP_NAME: your-app
  CACHE_VERSION: v1
  # Example vars; add more via repo/org ENV or Secrets.

permissions:
  contents: read
  id-token: write        # for OIDC to cloud if needed
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

          path: |
  build_test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ node, python ]
        include:
          - language: node
            setup: |
              corepack enable
              npm ci
            test: |
              npm run lint
              npm test --if-present
              npm run build --if-present
            cache_key: node-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}
          - language: python
            setup: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt || true
            test: |
              ruff check . || true
              pytest -q || true
              python -m build || true
            cache_key: py-${{ hashFiles('**/requirements*.txt') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup ${{ matrix.language }}
        run: |
          ${{ matrix.setup }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/pip
          key: ${{ matrix.cache_key }}

      - name: Run tests
        run: |
          ${{ matrix.test }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/

  # Add additional jobs for build, deploy, security scan, etc. as needed
            ~/.npm
            ~/.cache/pip
            .venv
            node_modules
          key: ${{ env.CACHE_VERSION }}-${{ matrix.cache_key }}

      - name: Run tests & build
        run: |
          ${{ matrix.test }}

      - name: Upload test artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.language }}
          path: |
            coverage.*
            junit*.xml
            reports/**
          if-no-files-found: ignore

  # ----------------------------
  # 2) Security & quality gates
  # ----------------------------
  security_quality:
    name: Security & Quality Gates
    runs-on: ubuntu-latest
    needs: [ build_test ]
    steps:
      - uses: actions/checkout@v4

      # Example: dependency review for PRs
      - name: Dependency Review
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/dependency-review-action@v4

      # Example: CodeQL (enable per language)
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: javascript, python
      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v3

      - name: Quality Gate (placeholder)
        run: |
          echo "Add SAST/DAST, coverage thresholds, and policy checks here."
          # exit 1 to fail gate if threshold not met

  # ----------------------------
  # 3) Package & publish artifact
  # ----------------------------
  package:
    name: Package Artifact
    runs-on: ubuntu-latest
    needs: [ security_quality ]
    steps:
      - uses: actions/checkout@v4

      - name: Package
        run: |
          echo "Build deployment-ready artifact (container image / zip / chart)."
          # e.g., docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .

      - name: Login to GHCR (example)
        uses: docker/login-action@v3
        if: ${{ false }}   # set true to enable
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image (example)
        if: ${{ false }}   # set true to enable
        run: |
          echo "docker push ghcr.io/${{ github.repository }}:${{ github.sha }}"

      - name: Upload packaged artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: |
            dist/**
            build/**
            *.tar
            *.zip
          if-no-files-found: warn

  # ----------------------------
  # 4) Deploy (staged, protected envs)
  # ----------------------------
  deploy:
    name: Deploy (staged)
    runs-on: ubuntu-latest
    environment:
      name: production          # use GitHub Environments for approvals/secrets
      url: ${{ steps.out.outputs.app_url }}
    needs: [ package ]
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: ./package

      - name: Configure cloud auth (OIDC example)
        if: ${{ false }}   # set true and add cloud provider step
        run: echo "Authenticate to cloud using OIDC and deploy."

      - name: Deploy step (placeholder)
        id: deploy
        run: |
          echo "Run IaC/Helm/kubectl/CLI to deploy the artifact."
          echo "app_url=https://example.app" >> $GITHUB_OUTPUT

      - name: Post-deploy verification
        run: |
          echo "Hit health endpoints / run synthetic checks / validate migrations."
          # exit 1 to rollback on failure

      - name: Conditional rollback (example)
        if: ${{ failure() }}
        run: |
          echo "Invoke rollback routine (helm rollback / previous tag)."

